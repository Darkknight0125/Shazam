<file path=App.css>
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

</file>

<file path=App.jsx>
import { useEffect, useState } from "react";
import { BrowserRouter, Route, Switch } from "react-router-dom";
import ScrollToTop from "react-scroll-to-top";
import NavBar from "./components/navbar/Navbar";
import SideBar from "./components/Sidebar/SideBar";
import Explore from "./pages/Explore";
import Genres from "./pages/genres/Genres";
import MoviesByGenre from "./pages/genres/MoviesByGenre";
import MoviePage from "./pages/moviePage/MoviePage";
import MoviesPage from "./pages/moviesPage/MoviesPage";
import SeriesPage from "./pages/seriesPage/SeriesPage";
import "./styles/globalStyles.css";
import { useGetProfileQuery } from './redux/services/authApi';
import { setCredentials, logout } from './redux/slices/authSlice';
import { useDispatch, useSelector } from 'react-redux';
import { FaSpinner } from "./common/icons";

const App = () => {
  const [isSearchItemsShow, setIsSearchItemsShow] = useState(false);
  const [mode, setMode] = useState(() => localStorage.getItem('theme') || 'dark');
  const [openMenu, setOpenMenu] = useState(false);
  const [isProfileSidebarOpen, setIsProfileSidebarOpen] = useState(false); // Added state
  const dispatch = useDispatch();
  const token = localStorage.getItem('authToken');
  const user = useSelector((state) => state.auth.user);

  const { data: profile, isSuccess, isError, isLoading } = useGetProfileQuery(undefined, {
    skip: !token,
  });

  useEffect(() => {
    if (isSuccess && profile?.user) {
      const { id, username, email, profilePicture } = profile.user;
      dispatch(setCredentials({
        token,
        user: {
          id,
          username,
          email,
          profilePicture: profilePicture || null,
        },
      }));
    } else if (isError) {
      console.error('Failed to fetch profile on app load:', isError);
      dispatch(logout());
    }
  }, [isSuccess, isError, profile, token, dispatch]);

  useEffect(() => {
    localStorage.setItem('theme', mode);
    if (mode === "light") {
      document.documentElement.classList.remove("dark");
    } else {
      document.documentElement.classList.add("dark");
    }
  }, [mode]);

  if (token && (isLoading || (!profile && !isError))) {
    return (
      <div className="flex justify-center items-center h-screen">
        <FaSpinner className="animate-spin text-3xl text-btn" />
      </div>
    );
  }

  return (
    <BrowserRouter>
      <ScrollToTop smooth />
      <div
        onClick={() => setIsSearchItemsShow(false)}
        className={`${
          !isSearchItemsShow && "hidden"
        } fixed z-40 w-full h-full bg-black backdrop-blur-sm dark:bg-opacity-60 bg-opacity-25 `}
      />
      <div
        onClick={() => setOpenMenu(false)}
        className={`${
          !openMenu && "hidden"
        } fixed z-[48] w-full h-full bg-black lg:hidden backdrop-blur-sm dark:bg-opacity-70 bg-opacity-25`}
      />
      <div
        className={`dark:text-textDark text-textLight ${
          mode === "dark" ? "gradient-06" : "lightTheme"
        }`}
      >
        <NavBar
          key={user?.id || 'nouser'}
          isSearch={isSearchItemsShow}
          setIsSearch={setIsSearchItemsShow}
          setMode={setMode}
          mode={mode}
          openMenu={openMenu}
          setOpenMenu={setOpenMenu}
          isProfileSidebarOpen={isProfileSidebarOpen}
          setIsProfileSidebarOpen={setIsProfileSidebarOpen}
        />
        <div className="flex">
          <SideBar
            mode={mode}
            openMenu={openMenu}
            setOpenMenu={setOpenMenu}
            setMode={setMode}
            isProfileSidebarOpen={isProfileSidebarOpen}
            setIsProfileSidebarOpen={setIsProfileSidebarOpen}
          />
          <div className="w-full flex flex-col">
            <Switch>
              <Route path={"/series"} component={() => <SeriesPage />} />
              <Route path={"/movies/:id"} exact component={() => <MoviePage />} />
              <Route path={"/genres/:id"} exact component={() => <MoviesByGenre />} />
              <Route path={"/movies"} exact component={() => <MoviesPage />} />
              <Route path={"/genres"} exact component={() => <Genres />} />
              <Route path={"/"} exact component={() => <Explore />} />
            </Switch>
          </div>
        </div>
      </div>
    </BrowserRouter>
  );
};

export default App;
</file>

<file path=index.css>
@tailwind base;
@tailwind components;
@tailwind utilities;
</file>

<file path=main.jsx>
import React from 'react';
import ReactDOM from 'react-dom/client';
import { Provider } from 'react-redux';
import { store } from './redux/store';
import { ContextProvider } from './contextProvider/ContextProvider';
import App from './App';
import './styles/globalStyles.css';
import './index.css';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <Provider store={store}>
      <ContextProvider>
        <App />
      </ContextProvider>
    </Provider>
  </React.StrictMode>
);
</file>

<file path=assets\logoImage.png>
<file path=assets\logoImageDark.png>
<file path=assets\react.svg>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path=common\icons.js>
export { MdOutlineExplore } from "react-icons/md";
export { AiOutlineHeart } from "react-icons/ai";
export { AiFillHeart } from "react-icons/ai";
export { RiMovie2Fill } from "react-icons/ri";
export { GiCeremonialMask } from "react-icons/gi";
export { MdMonitor } from "react-icons/md";
export { BiCameraMovie } from "react-icons/bi";
export { BiGift } from "react-icons/bi";
export { IoNewspaperOutline } from "react-icons/io5";
export { AiOutlineSchedule } from "react-icons/ai";
export { FaSpinner } from 'react-icons/fa';

</file>

<file path=components\auth\AuthModal.jsx>
import { useState } from 'react';
import { useDispatch } from 'react-redux';
import { useSignupMutation, useLoginMutation } from '../../redux/services/authApi';
import { setCredentials } from '../../redux/slices/authSlice';
import { styles } from '../../styles/styles';

const AuthModal = ({ isOpen, onClose }) => {
  const [isLogin, setIsLogin] = useState(true);
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    password: '',
  });
  const [error, setError] = useState('');
  const dispatch = useDispatch();
  const [signup, { isLoading: isSigningUp }] = useSignupMutation();
  const [login, { isLoading: isLoggingIn }] = useLoginMutation();

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    try {
      let result;
      if (isLogin) {
        result = await login({
          email: formData.email,
          password: formData.password,
        }).unwrap();
      } else {
        result = await signup({
          username: formData.username,
          email: formData.email,
          password: formData.password,
        }).unwrap();
      }
      dispatch(setCredentials({ token: result.token, user: result.user }));
      onClose();
    } catch (err) {
      setError(err.data?.message || 'An error occurred');
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-60 backdrop-blur-sm">
      <div className="dark:bg-[#101018] bg-white rounded-2xl p-6 w-[90%] max-w-md">
        <h2 className="text-2xl font-bold text-center dark:text-textDark text-textLight mb-4">
          {isLogin ? 'Login' : 'Sign Up'}
        </h2>
        {error && <p className="text-red-500 text-center mb-4">{error}</p>}
        <form onSubmit={handleSubmit} className="flex flex-col gap-4">
          {!isLogin && (
            <input
              type="text"
              name="username"
              value={formData.username}
              onChange={handleChange}
              placeholder="Username"
              className="p-3 rounded-lg bg-gray-200 dark:bg-gray-800 dark:text-textDark text-textLight border border-gray-300 dark:border-gray-600 focus:outline-none"
              required
            />
          )}
          <input
            type="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            placeholder="Email"
            className="p-3 rounded-lg bg-gray-200 dark:bg-gray-800 dark:text-textDark text-textLight border border-gray-300 dark:border-gray-600 focus:outline-none"
            required
          />
          <input
            type="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            placeholder="Password"
            className="p-3 rounded-lg bg-gray-200 dark:bg-gray-800 dark:text-textDark text-textLight border border-gray-300 dark:border-gray-600 focus:outline-none"
            required
          />
          <button
            type="submit"
            disabled={isSigningUp || isLoggingIn}
            className={`${styles.loginBtn} w-full`}
          >
            {isSigningUp || isLoggingIn ? 'Processing...' : isLogin ? 'Login' : 'Sign Up'}
          </button>
        </form>
        <p className="text-center mt-4 dark:text-textDark text-textLight">
          {isLogin ? "Don't have an account?" : 'Already have an account?'}{' '}
          <span
            className="text-btn cursor-pointer hover:underline"
            onClick={() => setIsLogin(!isLogin)}
          >
            {isLogin ? 'Sign Up' : 'Login'}
          </span>
        </p>
        <button
          onClick={onClose}
          className="mt-4 w-full text-center text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
        >
          Close
        </button>
      </div>
    </div>
  );
};

export default AuthModal;
</file>

<file path=components\auth\ProfileSidebar.jsx>
import { useDispatch, useSelector } from 'react-redux';
import { useUpdateUsernameMutation, useUploadProfilePictureMutation } from '../../redux/services/authApi';
import { logout as logoutAction, updateUser } from '../../redux/slices/authSlice';
import { useState, useRef, useEffect } from 'react';
import { AiOutlineClose, AiOutlineEdit } from 'react-icons/ai';
import { FaSpinner } from 'react-icons/fa';
import { styles } from '../../styles/styles';
import { withRouter } from 'react-router-dom';

const ProfileSidebar = ({ isOpen, onClose, history, setOpenMenu }) => {
  const dispatch = useDispatch();
  const { user } = useSelector((state) => state.auth);
  const [isEditing, setIsEditing] = useState(false);
  const [username, setUsername] = useState(user?.username || '');
  const [updateUsername, { isLoading: isUpdatingUsername }] = useUpdateUsernameMutation();
  const [uploadProfilePicture, { isLoading: isUploadingPicture }] = useUploadProfilePictureMutation();
  const fileInputRef = useRef(null);

  useEffect(() => {
    setUsername(user?.username || '');
  }, [user]);

  const handleLogout = () => {
    dispatch(logoutAction());
    onClose();
    history.push('/');
    if (setOpenMenu) {
      setOpenMenu(false); // Close sidebar on logout for consistency
    }
  };

  const handleUpdateProfile = async (e) => {
    e.preventDefault();
    try {
      const updateProfile = await updateUsername({ username }).unwrap();
      const user = updateProfile.user;
      dispatch(updateUser({
        id: user.id,
        username: user.username,
        email: user.email,
        profilePicture: user.profilePicture || null,
      }));
      setIsEditing(false);
    } catch (err) {
      console.error('Failed to update username:', err);
    }
  };

  const handleProfilePictureUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const formData = new FormData();
    formData.append('profilePicture', file);

    try {
      const updatedProfile = await uploadProfilePicture(formData).unwrap();
      const user = updatedProfile.user;
      dispatch(updateUser({
        id: user.id,
        username: user.username,
        email: user.email,
        profilePicture: user.profilePicture || null,
      }));
    } catch (err) {
      console.error('Failed to upload profile picture:', err);
    }
  };

  const triggerFileInput = () => {
    fileInputRef.current.click();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50">
      <div
        className="fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm"
        onClick={onClose}
      />
      <div className="fixed right-0 top-0 h-full w-[300px] dark:bg-[#101018] bg-white p-6 flex flex-col z-[51]">
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-xl font-bold dark:text-textDark text-textLight">Profile</h2>
          <AiOutlineClose
            className="text-2xl cursor-pointer dark:text-textDark text-textLight"
            onClick={onClose}
          />
        </div>
        {user ? (
          <div className="flex flex-col gap-4">
            <div className="relative self-center">
              <img
                src={user.profilePicture || 'https://img.freepik.com/free-vector/blue-circle-with-white-user_78370-4707.jpg'}
                alt="Profile"
                className="w-24 h-24 rounded-full"
              />
              <div className="absolute bottom-0 right-0">
                {isUploadingPicture ? (
                  <FaSpinner className="animate-spin text-2xl text-btn" />
                ) : (
                  <AiOutlineEdit
                    className="text-2xl cursor-pointer text-btn bg-white dark:bg-gray-800 rounded-full p-1"
                    onClick={triggerFileInput}
                    title="Edit Profile Picture"
                  />
                )}
              </div>
              <input
                type="file"
                accept="image/*"
                ref={fileInputRef}
                className="hidden"
                onChange={handleProfilePictureUpload}
              />
            </div>
            {isEditing ? (
              <form onSubmit={handleUpdateProfile} className="flex flex-col gap-4">
                <input
                  type="text"
                  value={username}
                  onChange={(e) => setUsername(e.target.value)}
                  placeholder="Enter Username"
                  className="p-2 rounded-lg bg-gray-200 dark:bg-gray-800 dark:text-textDark text-textLight border border-gray-300 dark:border-gray-600"
                  required
                />
                <button
                  type="submit"
                  disabled={isUpdatingUsername}
                  className={`${styles.loginBtn} w-full`}
                >
                  {isUpdatingUsername ? 'Saving...' : 'Save'}
                </button>
                <button
                  onClick={() => setIsEditing(false)}
                  className="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300"
                >
                  Cancel
                </button>
              </form>
            ) : (
              <>
                <p className="text-center text-lg font-semibold dark:text-textDark text-textLight">
                  {user.username || 'Loading...'}
                </p>
                <p className="text-center dark:text-textDark text-textLight">
                  {user.email || ''}
                </p>
                <button
                  onClick={() => setIsEditing(true)}
                  className="text-btn hover:underline"
                >
                  Edit Username
                </button>
              </>
            )}
            <button
              onClick={handleLogout}
              className={`${styles.loginBtn} w-full mt-4`}
            >
              Logout
            </button>
          </div>
        ) : (
          <div className="flex justify-center">
            <FaSpinner className="animate-spin text-3xl text-btn" />
          </div>
        )}
      </div>
    </div>
  );
};

export default withRouter(ProfileSidebar);
</file>

<file path=components\explore\ComingSoon.jsx>
import ComingSoonItem from "./ComingSoonItem";
import { useGetComingSoonQuery } from "../../redux/services/tmdbApi";

const ComingSoon = () => {
  const { data, isFetching } = useGetComingSoonQuery();

  if (isFetching) return null;

  return (
    <div className="lg:w-[300px] dark:bg-border bg-white rounded-3xl">
      <div className="mx-3 pt-3">
        {data?.results?.slice(0, 5)?.map((item) => (
          <ComingSoonItem movieId={item.id} key={item.id} />
        ))}
      </div>
    </div>
  );
};

export default ComingSoon;
</file>

<file path=components\explore\ComingSoonItem.jsx>
import { Spin } from "antd";
import { Link } from "react-router-dom";
import { useGetMovieDetailsQuery } from "../../redux/services/tmdbApi";

const ComingSoonItem = ({ movieId }) => {
  const { data, isFetching, error } = useGetMovieDetailsQuery({ movieId });

  if (isFetching) {
    return (
      <div className="flex justify-center h-[200px] dark:border border-slate-400 rounded-2xl">
        <div className="self-center">
          <Spin className="self-center" size="large" />
        </div>
      </div>
    );
  }

  if (error) return null;

  return (
    <div className="flex py-2">
      <img
        src={`https://image.tmdb.org/t/p/w200${data?.poster_path}`}
        alt={data?.title}
        className="w-[120px] h-[176px] rounded-lg"
      />
      <div className="ml-3 flex flex-col justify-between">
        <div>
          <div className="mt-1">
            <p className="text-[19px]">{data?.title}</p>
          </div>
          <div>
            {data?.genres?.slice(0, 1).map((genre) => (
              <Link
                key={genre.id}
                to={`/genres/${genre.id}`}
                state={{ genre: genre.name }}
              >
                <p className="mr-2 backdrop-blur-sm duration-300 text-center bg-gray-200 dark:bg-opacity-10 py-1 px-2 mt-2 rounded-sm hover:bg-screenDark">
                  {genre.name}
                </p>
              </Link>
            ))}
          </div>
        </div>
        <div className="mt-1 text-btn font-semibold pb-3">
          <span className="font-semibold text-textPDark">Release Date:</span>{" "}
          {data?.release_date}
        </div>
      </div>
    </div>
  );
};

export default ComingSoonItem;
</file>

<file path=components\explore\ExploreItemCard.jsx>
import { Spin } from "antd";
import { Link, useHistory } from "react-router-dom";
import { useGetMovieDetailsQuery } from "../../redux/services/tmdbApi";

const ExploreItemCard = ({ movieId }) => {
  const { data, isFetching, error } = useGetMovieDetailsQuery({ movieId });
  const navigate = useHistory();

  if (isFetching || error) {
    return (
      <div className="flex justify-center h-full dark:border border-slate-400 rounded-2xl">
        <div className="self-center">
          <Spin size="large" />
        </div>
      </div>
    );
  }

  return (
    <Link to={`/movies/${data?.id}`} state={{ data }}>
      <div className="flex flex-col text-textDark">
        <div className="relative group">
          <img
            src={`https://image.tmdb.org/t/p/w500${data?.poster_path}`}
            alt={data?.title}
            className="w-[130px] h-[191px] md:w-[170px] md:h-[250px] rounded-xl"
          />
          <div className="z-20 hidden md:flex absolute md:w-[170px] md:h-[250px] inset-0 rounded-xl origin-bottom scale-y-0 group-hover:scale-y-100 group-hover:bg-opacity-80 group-hover:bg-screenDark duration-200 cursor-pointer">
            <div className="flex flex-col justify-between">
              <div>
                <p className="text-[17px] mt-2 mx-1 font-semibold">
                  {data?.title}
                </p>
                <div className="flex mt-2 mx-3">
                  <span className="self-center mx-1 font-bold">
                    {data?.vote_average?.toFixed(1)}
                  </span>
                </div>
                <div className="flex flex-wrap mt-1 mx-2 text-sm font-semibold">
                  {data?.genres?.slice(0, 2)?.map((genre) => (
                    <div
                      key={genre.id}
                      onClick={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        navigate.push(`/genres/${genre.id}`, {
                          state: { genre: genre.name },
                        });
                      }}
                      className="mr-2 backdrop-blur-sm bg-gray-200 bg-opacity-10 py-1 px-3 mt-2 rounded-sm hover:bg-screenDark cursor-pointer"
                    >
                      {genre.name}
                    </div>
                  ))}
                </div>
              </div>
              <div className="text-center pb-6 w-[169px] px-3">
                <button className="btn py-2 w-full rounded-md backdrop-blur-sm font-bold hover:rounded-xl">
                  Watch Movie
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Link>
  );
};

export default ExploreItemCard;
</file>

<file path=components\explore\ItemCard.jsx>
import { useGetMovieDetailsQuery } from "../../redux/services/tmdbApi";
import { useState } from "react";
import { FaStar } from "react-icons/fa";
import { Link } from "react-router-dom";
import { Spin } from "antd";

const ItemCard = ({ movieId }) => {
  const { data, isFetching, error } = useGetMovieDetailsQuery({ movieId });

  if (isFetching) {
    return (
      <div className="flex justify-center h-[268px] w-[180px] dark:border border-slate-400 rounded-2xl">
        <div className="self-center">
          <Spin className="self-center" size="large" />
        </div>
      </div>
    );
  }

  if (error) return null;

  return (
    <Link to={`/movies/${data?.id}`} state={{ data }}>
      <div className="flex flex-col w-[140px] y9:w-[182px]">
        <div className="relative group text-textDark">
          <img
            src={`https://image.tmdb.org/t/p/w200${data?.poster_path}`}
            alt={data?.title}
            className="w-[140px] h-[205px] y9:w-[182px] y9:h-[268px] rounded-xl"
          />
          <div className="absolute hidden y9:flex z-20 inset-0 rounded-xl origin-bottom scale-y-0 group-hover:scale-y-100 group-hover:bg-opacity-80 group-hover:bg-screenDark duration-200 cursor-pointer">
            <div className="flex flex-col justify-between">
              <div>
                <p className="px-5 pt-5 font-bold">
                  Year: {data?.release_date?.split("-")[0]}
                </p>
                <p className="px-5 pt-1 font-semibold">
                  {data?.runtime || "--"} minutes
                </p>
                <div className="flex flex-wrap mt-2 mx-2 text-sm font-semibold">
                  {data?.genres?.slice(0, 3)?.map((genre) => (
                    <Link
                      key={genre.id}
                      to={`/genres/${genre.id}`}
                      state={{ genre: genre.name }}
                    >
                      <p className="mr-2 backdrop-blur-sm bg-gray-200 bg-opacity-10 py-1 px-3 mt-2 rounded-sm hover:bg-screenDark">
                        {genre.name}
                      </p>
                    </Link>
                  ))}
                </div>
              </div>
              <div className="text-center pb-6 w-[180px] px-3">
                <button className="btn py-2 w-full rounded-md backdrop-blur-sm font-bold hover:rounded-xl">
                  Watch Movie
                </button>
              </div>
            </div>
          </div>
        </div>
        <div className="w-[140px] text-center y9:w-[180px] flex self-center justify-center text-[17px]">
          <p>{data?.title}</p>
        </div>
        <div className="text-[14px] text-[#ebaf1a] flex justify-center">
          <FaStar className="self-center mx-1" />
          <p className="self-center font-semibold">
            {data?.vote_average?.toFixed(1)}
          </p>
        </div>
      </div>
    </Link>
  );
};

export default ItemCard;
</file>

<file path=components\explore\TopAnime.jsx>
const TopAnime = () => {
    return (  '');
}
 
export default TopAnime;
</file>

<file path=components\explore\TopMovie.jsx>
import { Link } from "react-router-dom";
import { ImFire } from "react-icons/im";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";
import "swiper/css/pagination";
import "swiper/css/navigation";
import { Autoplay, Pagination, Navigation, FreeMode } from "swiper";
import ExploreItemCard from "./ExploreItemCard";
import { useGetTopMoviesQuery } from "../../redux/services/tmdbApi";
import { LoadingOutlined } from "@ant-design/icons";

const TopMovie = () => {
  const { data, isFetching, error } = useGetTopMoviesQuery();
  if (isFetching) {
    return (
      <div className="flex justify-center mt-10 ">
        <div>
          <LoadingOutlined style={{ fontSize: 48 }} />
        </div>
        <p className="text-[26px] self-center mx-1 ">Loading . . . </p>
      </div>
    );
  }
  return (
    <div className="mt-16 max-w-[700px] md:self-center  ">
      <div className="flex justify-between mb-1 ">
        <p className="text-[20px] font-semibold mx-3 ">Popular Movies </p>
        <Link to={"/movies"}>
          <p className="text-btn font-semibold text-sm self-center mt-1 ">
            View All
          </p>
        </Link>
      </div>

      <Swiper
        breakpoints={{
          320: { slidesPerView: 3, spaceBetween: 6 },
          570: { slidesPerView: 4, spaceBetween: 10 },
        }}
        style={{
          "--swiper-navigation-color": "#fff",
          "--swiper-navigation-size": "30px",
          "--swiper-pagination-color": "#fff",
        }}
        autoplay={{
          delay: 2500,
          disableOnInteraction: false,
        }}
        navigation={true}
        modules={[Pagination, Navigation, Autoplay]}
        className="relative h-[200px] md:h-[270px] max-w-[700px] flex"
      >
        {data?.results?.slice(0, 8)?.map((movie, index) => (
          <SwiperSlide key={movie.id}>
            <ExploreItemCard movieId={movie.id} />
          </SwiperSlide>
        ))}
      </Swiper>

    </div>
  );
};

export default TopMovie;

</file>

<file path=components\explore\TopSeries.jsx>
import { Link } from "react-router-dom";
import { ImFire } from "react-icons/im";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";
import "swiper/css/pagination";
import "swiper/css/navigation";
import { Autoplay, Pagination, Navigation } from "swiper";
import ExploreItemCard from "./ExploreItemCard";
import {
  useGetTopSeriesQuery,
} from "../../redux/services/tmdbApi";
import { LoadingOutlined } from "@ant-design/icons";

const TopSeries = () => {
  const { data, isFetching, error } = useGetTopSeriesQuery();
  if (isFetching) {
    return ('');
  }
  return (
    <div className="mt-6 max-w-[700px] md:self-center">
      <div className="flex justify-between mb-1 ">
        <p className="text-[20px] font-semibold mx-3 ">Popular Series </p>
        <Link to={"/movies"}>
          <p className="text-btn font-semibold text-sm self-center mt-1 ">
            View All
          </p>
        </Link>
      </div>
      <Swiper
        breakpoints={{
          320: { slidesPerView: 3, spaceBetween: 6 },
          570: { slidesPerView: 4, spaceBetween: 10 },
        }}
        style={{
          "--swiper-navigation-color": "#fff",
          "--swiper-navigation-size": "30px",
          "--swiper-pagination-color": "#fff",
        }}
        autoplay={{
          delay: 2500,
          disableOnInteraction: false,
        }}
        navigation={true}
        modules={[Pagination, Navigation, Autoplay]}
        className="relative h-[200px] md:h-[270px] max-w-[700px] flex"
      >
        {data?.results?.slice(0, 8)?.map((series, index) => (
          <SwiperSlide key={series.id}>
            <ExploreItemCard movieId={series.id} />
          </SwiperSlide>
        ))}
      </Swiper>

    </div>
  );
};

export default TopSeries;

</file>

<file path=components\explore\TrendMovies.jsx>
import { ImFire } from "react-icons/im";
import { Swiper, SwiperSlide } from "swiper/react";
import "swiper/css";
import "swiper/css/pagination";
import "swiper/css/navigation";
import { Autoplay, Pagination, Navigation } from "swiper";
import TrendMoviesItem from "./TrendMoviesItem";
import { useGetTrendingMoviesQuery } from "../../redux/services/tmdbApi";

const TrendMovies = () => {
  const { data, isFetching } = useGetTrendingMoviesQuery();

  if (isFetching) return null;

  return (
    <div className="en mr-1">
      <p className="text-[23px] font-semibold mb-2 flex">
        Trending Movie
        <span className="self-center text-[20px] mx-1">
          <ImFire />
        </span>
      </p>
      <Swiper
        style={{
          "--swiper-navigation-color": "#fff",
          "--swiper-navigation-size": "30px",
          "--swiper-pagination-color": "#fff",
        }}
        centeredSlides={true}
        autoplay={{
          delay: 4000,
          disableOnInteraction: false,
        }}
        pagination={{
          clickable: true,
        }}
        navigation={true}
        modules={[Autoplay, Pagination, Navigation]}
        className="relative h-[250px] md:h-[350px] max-w-[700px] flex"
      >
        {data?.results?.slice(0, 5)?.map((item) => (
          <SwiperSlide key={item.id}>
            <TrendMoviesItem item={item} />
          </SwiperSlide>
        ))}
      </Swiper>
    </div>
  );
};

export default TrendMovies;
</file>

<file path=components\explore\TrendMoviesItem.jsx>
import { Link, useHistory } from "react-router-dom";

const TrendMoviesItem = ({ item }) => {
  const history = useHistory();

  return (
    <Link to={`/movies/${item.id}`} state={{ data: item }}>
      <div className="relative h-[250px] md:h-[350px] max-w-[700px] flex dark:bg-transparent bg-black bg-opacity-70 text-textDark rounded-3xl">
        <img
          src={`https://image.tmdb.org/t/p/w780${item.backdrop_path}`}
          alt={item.title}
          className="absolute z-0 h-[250px] md:h-[350px] w-[700px] rounded-3xl opacity-[65%]"
        />
        <div className="z-20 relative self-center flex mx-3 md:mx-7 w-full">
          <img
            src={`https://image.tmdb.org/t/p/w200${item.poster_path}`}
            alt={item.title}
            className="w-[130px] h-[191px] self-center md:w-[190px] md:h-[280px] rounded-2xl mr-5"
          />
          <div className="flex flex-col justify-between w-full">
            <div className="flex flex-col">
              <p className="text-[19px] md:text-[22px] font-semibold">
                {item.title || item.name}
              </p>
              <div className="flex text-sm md:text-[16px] mt-3 font-semibold opacity-80">
                {item.release_date?.split("-")[0] || item.first_air_date?.split("-")[0]} | {item.media_type === "movie" ? "Movie" : "Series"} | {item.runtime || "--"} min
              </div>
              <div className="flex mt-1 flex-wrap opacity-90 text-sm">
                {item.genre_ids?.slice(0, 4).map((genreId, index) => (
                  <p
                    key={index}
                    onClick={(e) => {
                      e.stopPropagation();
                      history.push(`/genres/${genreId}`, {
                        state: { genre: item.genres?.find(g => g.id === genreId)?.name || "Genre" },
                      });
                    }}
                    className={`cursor-pointer ${(index === 1 || index === 2 || index === 3) && "hidden md:flex"} mr-2 backdrop-blur-sm font-semibold bg-black bg-opacity-25 py-1 px-4 mt-2 rounded-sm hover:bg-screenDark duration-300`}
                  >
                    {item.genres?.find(g => g.id === genreId)?.name || "Unknown"}
                  </p>
                ))}
              </div>
            </div>
            <div>
              <div className="flex flex-col sm:flex-row pt-5 justify-end">
                <button className="hidden sm:inline sm:w-full sm:mr-5 mx-2 y9:mx-8 my-2 sm:my-0 sm:mx-0 py-3 bg-gray-400 rounded-xl backdrop-blur-sm bg-opacity-30 font-semibold">
                  Trailer
                </button>
                <button className="sm:w-full sm:mr-5 mx-2 y9:mx-8 sm:mx-0 py-3 bg-blue-700 duration-300 rounded-xl backdrop-blur-sm hover:bg-blue-800 font-semibold">
                  Watch Movie
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Link>
  );
};

export default TrendMoviesItem;
</file>

<file path=components\genre\GenreCard.jsx>
import { Link } from "react-router-dom";

const GenreCard = ({ genre }) => {
  return (
    <div className="w-[213px] h-[120px] rounded-md text-textDark">
      <Link to={`/genres/${genre.id}`} state={{ genre: genre.name }}>
        <div className="relative group cursor-pointer">
          <img
            src={`https://via.placeholder.com/213x120?text=${genre.name}`}
            alt={genre.name}
            className="rounded-lg w-[213px] h-[120px]"
          />
          <div className="absolute inset-y-[40px] rounded-b-md gradient-08 w-[213px] h-[80px] group-hover:inset-y-0 group-hover:h-[120px] group-hover:bg-black group-hover:bg-opacity-90 group-hover:rounded-md duration-300">
            <p className="pt-11 px-3 text-[18px] font-semibold group-hover:text-[22px] duration-300">
              {genre.name}
            </p>
          </div>
        </div>
      </Link>
    </div>
  );
};

export default GenreCard;
</file>

<file path=components\navbar\Navbar.jsx>
import { DarkModeToggle } from '@anatoliygatt/dark-mode-toggle';
import { MdMenu, MdMenuOpen } from 'react-icons/md';
import { useSelector } from 'react-redux';
import { styles } from '../../styles/styles';
import logoImage from '../../assets/logoImage.png';
import logoImageDark from '../../assets/logoImageDark.png';
import Search from './Search';
import AuthModal from '../auth/AuthModal';
import ProfileSidebar from '../auth/ProfileSidebar';
import { useState } from 'react';
import { FaSpinner } from 'react-icons/fa';

const Navbar = ({ isSearch, setIsSearch, mode, setMode, openMenu, setOpenMenu, isProfileSidebarOpen, setIsProfileSidebarOpen }) => {
  const { isAuthenticated, user } = useSelector((state) => state.auth);
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);

  return (
    <div className="flex justify-between pt-3 mx-3 md:mx-7 z-[60]">
      <div className="flex self-center justify-center">
        <div
          className="self-center"
          onClick={() => setOpenMenu(!openMenu)}
        >
          {openMenu ? (
            <MdMenuOpen className="text-[27px] mt-4 sm:mx-3 cursor-pointer text-btn" />
          ) : (
            <MdMenu className="text-[27px] mt-4 sm:mx-3 cursor-pointer hover:text-btn duration-200" />
          )}
        </div>
        <div className="self-center font-extrabold sm:mx-3 mt-4 flex min-w-[145px] sm:min-w-[150px]">
          <img
            src={mode === 'dark' ? logoImage : logoImageDark}
            alt="logoImage"
            className="w-[25px] h-[31.6px] sm:w-[30px] sm:h-[38px] mx-1"
          />
          <p className="self-center text-[18px] sm:text-[21px]">
            <span className="text-btn">SHAZAM</span>
          </p>
        </div>
      </div>
      <Search isSearch={isSearch} setIsSearch={setIsSearch} />
      <div className="self-center z-20 flex items-center">
        <div className="self-center mx-2 lg:mx-2 hidden lg:block">
          <DarkModeToggle
            mode={mode}
            dark="dark"
            light="light"
            size="sm"
            inactiveTrackColor="#e2e8f0"
            inactiveTrackColorOnHover="#f8fafc"
            inactiveTrackColorOnActive="#cbd5e1"
            activeTrackColor="#334155"
            activeTrackColorOnHover="#1e293b"
            activeTrackColorOnActive="#0f172a"
            inactiveThumbColor="#1e293b"
            activeThumbColor="#e2e8f0"
            onChange={(mode) => setMode(mode)}
          />
        </div>
        {isAuthenticated ? (
          <div className="relative">
            {user ? (
              <img
                src={user.profilePicture || 'https://img.freepik.com/free-vector/blue-circle-with-white-user_78370-4707.jpg'}
                alt="Profile"
                className="w-8 h-8 lg:w-10 lg:h-10 rounded-full cursor-pointer"
                onClick={() => setIsProfileSidebarOpen(true)}
              />
            ) : (
              <FaSpinner className="animate-spin text-2xl text-btn" />
            )}
          </div>
        ) : (
          <button
            className={`${styles.loginBtn} text-sm lg:text-base px-3 lg:px-4 py-1 lg:py-2`}
            onClick={() => setIsAuthModalOpen(true)}
          >
            LOG IN
          </button>
        )}
      </div>
      <AuthModal isOpen={isAuthModalOpen} onClose={() => setIsAuthModalOpen(false)} />
      <ProfileSidebar
        isOpen={isProfileSidebarOpen}
        onClose={() => setIsProfileSidebarOpen(false)}
        key={user?.id || 'nouser'}
        setOpenMenu={setOpenMenu}
      />
    </div>
  );
};

export default Navbar;
</file>

<file path=components\navbar\Search.jsx>
import { HiOutlineStar } from "react-icons/hi2";
import { Link } from "react-router-dom";

const SearchItem = ({ result, search, setSearch }) => {
  if (!result?.title && !result?.name) return null;

  return (
    <Link to={`/movies/${result.id}`} state={{ data: result }}>
      <div className={`${(!result?.title && !result?.name) || !search ? "hidden" : ""}`}>
        <div className="flex justify-between mx-2 mt-2 mb-2 py-2 relative group cursor-pointer hover:dark:bg-[#0d0d14] hover:bg-zinc-600 hover:text-textDark duration-300 rounded-md">
          <div className="flex mx-2">
            <img
              src={`https://image.tmdb.org/t/p/w92${result.poster_path}`}
              alt={result.title || result.name}
              className="w-[70px] h-[98px] rounded-md group-hover:border-2 border-btn"
            />
            <div className="flex flex-col justify-between mx-3 my-2">
              <p className="text-[18px] font-semibold group-hover:text-btn duration-200">
                {result.title || result.name}
              </p>
              <p>{result.media_type === "movie" ? "Movie" : "Series"}</p>
              <p>Year: {result.release_date?.split("-")[0] || result.first_air_date?.split("-")[0]}</p>
            </div>
          </div>
          <div className="flex flex-col justify-center pl-5 pr-5 border-l my-3">
            <span className="text-[25px] text-yellow-400">
              <HiOutlineStar />
            </span>
            <p>{result.vote_average?.toFixed(1)}</p>
          </div>
        </div>
      </div>
    </Link>
  );
};

export default SearchItem;
</file>

<file path=components\navbar\SearchItem.jsx>
import { useEffect } from "react";
import { HiOutlineStar } from "react-icons/hi2";
import { Link } from "react-router-dom";
import { useGetMovieDetailsQuery } from "../../redux/services/tmdbApi";

const SearchItem = ({result ,search , setSearch }) => {
    const itemId = result?.id?.match(/\d+/g)[0]
    const {data , fetching , error} = useGetMovieDetailsQuery({movieId:itemId})
    console.log(data?.ratings.rating)
    useEffect(()=>{
      
      if(data?.title.title) return setSearch(true)
      
    },[data])
    return ( 
        <Link to={{pathname:`movies/${result?.title}` , state:{data} }} >
        <div className={`${ (!result?.title || !result?.year || !search)&& 'hidden' } `} >
          <div className="flex justify-between mx-2 mt-2 mb-2 py-2 relative group  cursor-pointer hover:dark:bg-[#0d0d14] hover:bg-zinc-600 hover:text-textDark duration-300 rounded-md ">
            <div className="flex mx-2 ">
              <img
                src={result?.image?.url}
                alt=""
                className="w-[70px] h-[98px] rounded-md group-hover:border-2 border-btn  "
              />
              <div className="flex flex-col justify-between mx-3 my-2">
                <p className="text-[18px] font-semibold group-hover:text-btn duration-200 ">
                  {result?.title}
                </p>
                <p>{result?.titleType} </p>
                <p>Year : {result?.year} </p>
              </div>
            </div>
            <div className="flex flex-col justify-center pl-5 pr-5 border-l my-3 ">
              <span className="text-[25px] text-yellow-400  ">
                <HiOutlineStar />
              </span>
              <p>{data?.ratings?.rating}</p>
            </div>
          </div>
        </div>
        </Link>
     );
}
 
export default SearchItem;
</file>

<file path=components\Sidebar\SideBar.jsx>
import { sidbarItem } from '../../constants';
import SideBarList from './SideBarList';
import { styles } from '../../styles/styles';
import { useEffect, useState } from 'react';
import { DarkModeToggle } from '@anatoliygatt/dark-mode-toggle';
import { useSelector } from 'react-redux';
import AuthModal from '../auth/AuthModal';
import { FaSpinner } from 'react-icons/fa';
import logoImage from '../../assets/logoImage.png';
import logoImageDark from '../../assets/logoImageDark.png';

const SideBar = ({ openMenu, setOpenMenu, mode, setMode, isProfileSidebarOpen, setIsProfileSidebarOpen }) => {
  const [windowSize, setWindowSize] = useState(window.innerWidth);
  const { isAuthenticated, user } = useSelector((state) => state.auth);
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);

  useEffect(() => {
    const handleWindowResize = () => {
      setWindowSize(window.innerWidth);
    };
    window.addEventListener('resize', handleWindowResize);
    return () => window.removeEventListener('resize', handleWindowResize);
  }, []);

  useEffect(() => {
    if (windowSize >= 1024) {
      setOpenMenu(true);
    } else {
      setOpenMenu(false);
    }
  }, [windowSize, setOpenMenu]);

  return (
    <div
      className={`${styles.sideBar} origin-left ${
        !openMenu && 'scale-x-0 hidden'
      } ${
        openMenu && 'fixed lg:sticky top-0 dark:bg-[#07070a] lg:dark:bg-transparent bg-screenLight z-[49]'
      } duration-300`}
    >
      <div
        className={`relative ${isProfileSidebarOpen ? 'blur-sm brightness-75 pointer-events-none' : ''}`}
      >
      <div className="flex items-center gap-2 mt-5 mb-3 pl-4 lg:hidden">
        <img
          src={mode === 'dark' ? logoImage : logoImageDark}
          alt="logo"
          className="w-[25px] h-[31.6px] sm:w-[30px] sm:h-[38px]"
        />
        <p className="text-[20px] font-extrabold">
          <span className="text-btn">SHAZAM</span>
        </p>
      </div>
      <div className={`lg:hidden flex ${!openMenu && 'hidden'} flex-col items-center`}>
        <div className="mx-2">
          <DarkModeToggle
            mode={mode}
            dark="dark"
            light="light"
            size="sm"
            inactiveTrackColor="#e2e8f0"
            inactiveTrackColorOnHover="#f8fafc"
            inactiveTrackColorOnActive="#cbd5e1"
            activeTrackColor="#334155"
            activeTrackColorOnHover="#1e293b"
            activeTrackColorOnActive="#0f172a"
            inactiveThumbColor="#1e293b"
            activeThumbColor="#e2e8f0"
            onChange={(mode) => setMode(mode)}
          />
        </div>
      </div>
      <div>
        <SideBarList subTitle="MENU" items={sidbarItem} menu={openMenu} />
      </div>
      <AuthModal isOpen={isAuthModalOpen} onClose={() => setIsAuthModalOpen(false)} />
    </div>
  </div>
  );
};

export default SideBar;
</file>

<file path=components\Sidebar\SideBarList.jsx>
import { useEffect } from "react";
import { useState } from "react";
import { Link, withRouter } from "react-router-dom";
import { styles } from "../../styles/styles";

const SideBarList = ({ subTitle, items, history, menu }) => {
  const [selected, setSelected] = useState("explore");
  const [hovered, setHovered] = useState();
  const pathname = history.location.pathname.split("/")[1];
  useEffect(() => {
    if (pathname === "") return setSelected("explore");
    setSelected(pathname);
  }, [pathname]);
  return (
    <div>
      <div
        className={` flex flex-col mt-2 border-r-2 dark:border-border h-[500px]  `}
      >
        <p
          className={`${
            !menu && "hidden"
          } hidden lg:flex mx-5 mb-2 text-[16px] text-textPDark font-bold `}
        >
          {subTitle}
        </p>
        <ul
          className={`w-full
`}
        >
          {items.map((item, index) => (
            <Link
              key={index}
              to={`/${
                item.title === "Explore" ? "" : item.title.toLowerCase()
              }`}
            >
              <li
                className={`
                ${!menu && "pl-2 mx-0"}
                ${styles.sideBarItem} 
            ${selected === item.title.toLowerCase() && "border-l-[3px]"}

            `}
                onMouseEnter={() => setHovered(item.title.toLowerCase())}
                onMouseLeave={() => setHovered()}
              >
                <span
                  className={`
                ${
                  (hovered === item.title.toLowerCase() ||
                    selected === item.title.toLowerCase()) &&
                  "text-btn "
                }
                self-center px-2 mr-2 text-[24px]  `}
                >
                  {item.icon}
                </span>
                <p
                  className={`origin-left `}
                >
                  {item.title}
                </p>
              </li>
            </Link>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default withRouter(SideBarList);

</file>

<file path=constants\api.js>
export const BASE_API_URL = 'http://localhost:5000';
</file>

<file path=constants\index.jsx>
import {
  AiOutlineHeart,
  MdOutlineExplore,
  BiGift,
  IoNewspaperOutline,
  GiCeremonialMask,
  MdMonitor,
  BiCameraMovie,
  AiOutlineSchedule,
} from "../common/icons";

export const sidbarItem = [
  { title: "Explore", icon: <MdOutlineExplore /> },
  { title: "Movies", icon: <BiCameraMovie /> },
  { title: "Series", icon: <MdMonitor /> },
  { title: "Anime", icon: <GiCeremonialMask /> },
  { title: "Genres", icon: <BiGift /> },
  { title: "Favourites", icon: <AiOutlineHeart /> },
];
</file>

<file path=contextProvider\ContextProvider.jsx>
import React, { createContext, useContext, useState } from 'react';

const RtlContext = createContext();

export const ContextProvider = ({ children }) => {
  const [rtl, setRtl] = useState(false);

  return (
    <RtlContext.Provider value={{ rtl, setRtl }}>
      {children}
    </RtlContext.Provider>
  );
};

export const useRlt = () => {
  const { rtl } = useContext(RtlContext);
  return rtl;
};

export default ContextProvider;
</file>

<file path=pages\Explore.jsx>
import { Spin } from "antd";
import { GiPopcorn } from "react-icons/gi";
import ComingSoon from "../components/explore/ComingSoon";
import TopMovie from "../components/explore/TopMovie";
import TopSeries from "../components/explore/TopSeries";
import TrendMovies from "../components/explore/TrendMovies";
import { useRlt } from "../contextProvider/ContextProvider";

const Explore = () => {
  const rtl=useRlt()

  return (
    <div className="lg:flex  w-full " >
    <div className="mt-8 lg:w-full  mx-5  flex xs:flex-row flex-col xs:justify-between ">
      <div className="flex w-full flex-col justify-center">
        <TrendMovies />
        <TopMovie /> 
        <TopSeries />
      </div>
      <div className={`mt-5  relative top-0 ${rtl ? 'x:ml-10 2xl:ml-0' :'x:mr-10 2xl:mr-0'}  ` } >
        <div className="text-[20px] font-semibold flex mt-3 mx-3 ">
          <p className="self-center">Upcoming Movies</p>
          <span>
            <GiPopcorn className="text-[25px] self-center" />
          </span>
        </div>
        <ComingSoon />
      </div>
    </div>
    </div>
  );
};

export default Explore;

</file>

<file path=pages\genres\Genres.jsx>
import GenreCard from "../../components/genre/GenreCard";
import { useGetGenresQuery } from "../../redux/services/tmdbApi";

const Genres = () => {
  const { data, isFetching } = useGetGenresQuery();

  if (isFetching) return null;

  return (
    <div>
      <div className="flex flex-wrap gap-8 justify-center mx-5 mt-16">
        {data?.genres?.map((genre) => (
          <GenreCard genre={genre} key={genre.id} />
        ))}
      </div>
    </div>
  );
};

export default Genres;
</file>

<file path=pages\genres\MoviesByGenre.jsx>
import { LoadingOutlined } from "@ant-design/icons";
import { withRouter } from "react-router-dom";
import ItemCard from "../../components/explore/ItemCard";
import { useGetTopMoviesByGenreQuery } from "../../redux/services/tmdbApi";

const MoviesByGenre = ({ history }) => {
  const genreId = history.location.pathname.split("/")[2];
  const genreName = history.location.state?.genre || "Genre";
  const { data, isFetching, error } = useGetTopMoviesByGenreQuery({ genreId });

  if (isFetching) {
    return (
      <div className="flex justify-center mt-10">
        <div>
          <LoadingOutlined style={{ fontSize: 48 }} />
        </div>
        <p className="text-[26px] self-center mx-1">Loading . . .</p>
      </div>
    );
  }

  if (error) return <div>Error loading movies.</div>;

  return (
    <div className="flex flex-col">
      <p className="text-[22px] font-semibold mx-8 mt-8">{genreName} Movies</p>
      <div className="flex justify-center">
        <div className="flex flex-wrap gap-5 mx-8 mt-10">
          {data?.results?.slice(0, 8)?.map((movie) => (
            <ItemCard movieId={movie.id} key={movie.id} />
          ))}
        </div>
      </div>
    </div>
  );
};

export default withRouter(MoviesByGenre);
</file>

<file path=pages\moviePage\Comments.jsx>
import { useState } from 'react';
import { useSelector } from 'react-redux';
import { useGetCommentsQuery, usePostCommentMutation } from '../../redux/services/commentsApi';
import { FaSpinner } from 'react-icons/fa';
import AuthModal from '../../components/auth/AuthModal';
import { styles } from '../../styles/styles';
import moment from 'moment';

const Comments = ({ movieId }) => {
  const [content, setContent] = useState('');
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false);
  const { isAuthenticated, user } = useSelector((state) => state.auth);
  const { data, isFetching, error } = useGetCommentsQuery(
    { contentId: movieId, contentType: 'movie' },
    { skip: !movieId }
  );
  const [postComment, { isLoading: isPosting }] = usePostCommentMutation();

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!isAuthenticated) {
      setIsAuthModalOpen(true);
      return;
    }
    if (!content.trim()) return;

    try {
      await postComment({
        contentId: movieId,
        contentType: 'movie',
        content,
      }).unwrap();
      setContent('');
    } catch (err) {
      console.error('Failed to post comment:', err);
    }
  };

  return (
    <div className="mt-8 dark:text-textDark text-textLight">
      <h2 className="text-2xl font-bold mb-4">Comments</h2>
      {/* Post Comment Form */}
      <form onSubmit={handleSubmit} className="mb-8">
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          placeholder="Write a comment..."
          className="w-full h-24 p-3 rounded-lg bg-gray-200 dark:bg-gray-800 dark:text-textDark text-textLight border border-gray-300 dark:border-gray-600 resize-none focus:outline-none focus:border-btn"
          disabled={isPosting || !isAuthenticated}
        />
        <button
          type="submit"
          disabled={isPosting || !content.trim()}
          className={`${styles.loginBtn} mt-3 px-6 py-2 ${isPosting || !content.trim() ? 'opacity-50 cursor-not-allowed' : ''}`}
        >
          {isPosting ? <FaSpinner className="animate-spin text-xl" /> : 'Post Comment'}
        </button>
      </form>

      {/* Comments List */}
      {isFetching ? (
        <div className="flex justify-center">
          <FaSpinner className="animate-spin text-3xl text-btn" />
        </div>
      ) : error ? (
        <p className="text-center text-red-500">Failed to load comments.</p>
      ) : !data?.length ? (
        <p className="text-center text-gray-500 dark:text-gray-400">No comments yet. Be the first to comment!</p>
      ) : (
        <div className="space-y-4">
          {data.map((comment) => (
            <div
              key={comment._id}
              className="flex gap-4 p-4 rounded-lg border backdrop-blur-sm
                        dark:bg-screenDark dark:bg-opacity-80 dark:border-border
                        bg-gray-100 border-gray-300"
            >
              <img
                src={comment.user.profilePicture || 'https://img.freepik.com/free-vector/blue-circle-with-white-user_78370-4707.jpg'}
                alt={comment.user.username}
                className="w-10 h-10 rounded-full"
              />
              <div className="flex-1">
                <div className="flex justify-between">
                  <p className="font-semibold dark:text-textDark text-gray-900">
                    {comment.user.username}
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    {moment(comment.createdAt).fromNow()}
                  </p>
                </div>
                <p className="mt-1 dark:text-textDark text-gray-800">{comment.content}</p>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Auth Modal */}
      <AuthModal isOpen={isAuthModalOpen} onClose={() => setIsAuthModalOpen(false)} />
    </div>
  );
};

export default Comments;
</file>

<file path=pages\moviePage\Details.jsx>
import React from 'react';
import { useGetMovieDetailsQuery } from '../../redux/services/tmdbApi';
import { useParams } from 'react-router-dom';
import { LoadingOutlined } from '@ant-design/icons';
import { styles } from '../../styles/styles';

const Details = ({ movieId }) => {
  const { data: movie, isFetching, error } = useGetMovieDetailsQuery({movieId});

  if (isFetching) {
    return (
      <div className="flex justify-center mt-10">
        <LoadingOutlined style={{ fontSize: 48 }} />
        <p className="text-[26px] self-center mx-1">Loading...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center text-red-500 mt-10">
        Error loading movie details. Please try again later.
      </div>
    );
  }

  // Default values for missing data
  const movieDetails = {
    title: movie?.title || 'Not available',
    overview: movie?.overview || 'No description available.',
    genres: movie?.genres || [],
    release_date: movie?.release_date || 'Unknown',
    runtime: movie?.runtime || 0,
    vote_average: movie?.vote_average || 0,
    vote_count: movie?.vote_count || 0,
    production_companies: movie?.production_companies || [],
    production_countries: movie?.production_countries || [],
    spoken_languages: movie?.spoken_languages || [],
    cast: movie?.credits?.cast || [],
    crew: movie?.credits?.crew || [],
    homepage: movie?.homepage || '#',
    status: movie?.status || 'Unknown',
    budget: movie?.budget || 0,
    revenue: movie?.revenue || 0,
  };

  // Format runtime from minutes to hours and minutes
  const formatRuntime = (minutes) => {
    if (!minutes) return 'Unknown';
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return `${hours}h ${mins}m`;
  };

  // Get top 5 cast members and key crew (e.g., Director, Producer)
  const topCast = movieDetails.cast.slice(0, 5);
  const keyCrew = movieDetails.crew.filter(
    (member) => member.job === 'Director' || member.job === 'Producer'
  ).slice(0, 5);

  return (
    <div className="p-6 md:p-10 max-w-4xl mx-auto">
      <h1 className="text-3xl md:text-4xl font-bold mb-4 text-textLight dark:text-textDark">
        {movieDetails.title}
      </h1>
      <p className="text-lg mb-6 text-textLight dark:text-textDark">
        {movieDetails.overview}
      </p>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* General Info */}
        <div>
          <h2 className="text-xl font-semibold mb-2 text-textLight dark:text-textDark">
            Movie Details
          </h2>
          <p className="text-textLight dark:text-textDark">
            <strong>Genres:</strong>{' '}
            {movieDetails.genres.length > 0
              ? movieDetails.genres.map((g) => g.name).join(', ')
              : 'Not available'}
          </p>
          <p className="text-textLight dark:text-textDark">
            <strong>Release Date:</strong> {movieDetails.release_date}
          </p>
          <p className="text-textLight dark:text-textDark">
            <strong>Runtime:</strong> {formatRuntime(movieDetails.runtime)}
          </p>
          <p className="text-textLight dark:text-textDark">
            <strong>Rating:</strong>{' '}
            {movieDetails.vote_average > 0
              ? `${movieDetails.vote_average.toFixed(1)}/10 (${movieDetails.vote_count} votes)`
              : 'Not rated'}
          </p>
          <p className="text-textLight dark:text-textDark">
            <strong>Status:</strong> {movieDetails.status}
          </p>
          <p className="text-textLight dark:text-textDark">
            <strong>Homepage:</strong>{' '}
            <a
              href={movieDetails.homepage}
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-500 hover:underline"
              aria-label={`Visit homepage for ${movieDetails.title}`}
            >
              Visit Website
            </a>
          </p>
        </div>

        {/* Production Info */}
        <div>
          <h2 className="text-xl font-semibold mb-2 text-textLight dark:text-textDark">
            Production
          </h2>
          <p className="text-textLight dark:text-textDark">
            <strong>Budget:</strong>{' '}
            {movieDetails.budget > 0
              ? `$${movieDetails.budget.toLocaleString()}`
              : 'Not available'}
          </p>
          <p className="text-textLight dark:text-textDark">
            <strong>Revenue:</strong>{' '}
            {movieDetails.revenue > 0
              ? `$${movieDetails.revenue.toLocaleString()}`
              : 'Not available'}
          </p>
          <p className="text-textLight dark:text-textDark">
            <strong>Production Companies:</strong>{' '}
            {movieDetails.production_companies.length > 0
              ? movieDetails.production_companies.map((c) => c.name).join(', ')
              : 'Not available'}
          </p>
          <p className="text-textLight dark:text-textDark">
            <strong>Production Countries:</strong>{' '}
            {movieDetails.production_countries.length > 0
              ? movieDetails.production_countries.map((c) => c.name).join(', ')
              : 'Not available'}
          </p>
          <p className="text-textLight dark:text-textDark">
            <strong>Spoken Languages:</strong>{' '}
            {movieDetails.spoken_languages.length > 0
              ? movieDetails.spoken_languages.map((l) => l.english_name).join(', ')
              : 'Not available'}
          </p>
        </div>
      </div>

      {/* Cast */}
      <div className="mt-8">
        <h2 className="text-xl font-semibold mb-2 text-textLight dark:text-textDark">
          Top Cast
        </h2>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          {topCast.length > 0 ? (
            topCast.map((actor) => (
              <div key={actor.id} className="flex items-center">
                <img
                  src={
                    actor.profile_path
                      ? `https://image.tmdb.org/t/p/w200${actor.profile_path}`
                      : 'https://via.placeholder.com/50x50?text=No+Image'
                  }
                  alt={actor.name}
                  className="w-12 h-12 rounded-full mr-3"
                  loading="lazy"
                />
                <div>
                  <p className="font-medium text-textLight dark:text-textDark">
                    {actor.name}
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    {actor.character || 'Unknown role'}
                  </p>
                </div>
              </div>
            ))
          ) : (
            <p className="text-textLight dark:text-textDark">No cast information available.</p>
          )}
        </div>
      </div>

      {/* Crew */}
      <div className="mt-8">
        <h2 className="text-xl font-semibold mb-2 text-textLight dark:text-textDark">
          Key Crew
        </h2>
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
          {keyCrew.length > 0 ? (
            keyCrew.map((member) => (
              <div key={`${member.id}-${member.job}`} className="flex items-center">
                <img
                  src={
                    member.profile_path
                      ? `https://image.tmdb.org/t/p/w200${member.profile_path}`
                      : 'https://via.placeholder.com/50x50?text=No+Image'
                  }
                  alt={member.name}
                  className="w-12 h-12 rounded-full mr-3"
                  loading="lazy"
                />
                <div>
                  <p className="font-medium text-textLight dark:text-textDark">
                    {member.name}
                  </p>
                  <p className="text-sm text-gray-500 dark:text-gray-400">
                    {member.job}
                  </p>
                </div>
              </div>
            ))
          ) : (
            <p className="text-textLight dark:text-textDark">No crew information available.</p>
          )}
        </div>
      </div>

      {/* Action Buttons */}
      <div className="mt-8 flex gap-4">
        <a
          href={movieDetails.homepage}
          target="_blank"
          rel="noopener noreferrer"
          className={`${styles.loginBtn} px-4 py-2 text-sm md:text-base`}
          aria-label={`Visit official site for ${movieDetails.title}`}
        >
          Official Site
        </a>
      </div>
    </div>
  );
};

export default Details;
</file>

<file path=pages\moviePage\MoviePage.jsx>
import { Link, withRouter } from "react-router-dom";
import { BsPlay } from "react-icons/bs";
import { useGetMovieDetailsQuery } from "../../redux/services/tmdbApi";
import { Spin } from "antd";
import { useState, useEffect, useRef } from "react";
import { RxDotFilled } from "react-icons/rx";
import { BiLike, BiDislike } from "react-icons/bi";
import { AiFillHeart, AiOutlineHeart, AiFillLike, AiFillDislike } from "react-icons/ai";
import Trailer from "./Trailer";
import Comments from "./Comments";
import Details from "./Details";

const poi = ["Details", "Trailer", "Comments"];

const MoviePage = ({ history }) => {
  const [query, setQuery] = useState("Details");
  const [liked, setLiked] = useState(false);
  const movieId = history.location.pathname.split("/")[2];
  const { data, isFetching, error } = useGetMovieDetailsQuery({ movieId });
  const contentRef = useRef(null);

  const [windowSize, setWindowSize] = useState(window.innerWidth - 290 + "px");

  useEffect(() => {
    const handleWindowResize = () => {
      setWindowSize(window.innerWidth - 290 + "px");
    };
    window.addEventListener("resize", handleWindowResize);
    return () => window.removeEventListener("resize", handleWindowResize);
  }, []);

  const handleViewTrailer = () => {
    setQuery("Trailer");
    if (contentRef.current) {
      const offset = 80; // Adjust for mt-20 and some padding
      const elementPosition = contentRef.current.getBoundingClientRect().top + window.pageYOffset;
      window.scrollTo({
        top: elementPosition - offset,
        behavior: "smooth",
      });
    }
  };

  if (isFetching) {
    return (
      <div className="flex justify-center mt-10">
        <Spin size="large" />
      </div>
    );
  }

  if (error || !data) return <div className="text-center text-red-500 mt-10">Error loading movie details.</div>;

  return (
    <div>
      <div className="w-full z-0 relative group dark:bg-[#101018] h-[2000px] text-screenLight">
        <div className="absolute z-20 w-full mt-20 px-3 y9:px-7 sm:px-10 md:px-5 lg:px-2 xl:px-10 2xl:px-20">
          <div className="flex flex-col">
            <div className="flex flex-col md:flex-row">
              <div className="w-full md:w-auto flex justify-center md:justify-start">
                <div className="flex-col">
                  <img
                    src={`https://image.tmdb.org/t/p/w300${data.poster_path}`}
                    alt={data.title}
                    className="min-w-[180px] max-h-[265px] y9:min-w-[240px] y9:max-h-[352px] lg:min-w-[200px] lg:max-h-[351px] xl:min-w-[240px] xl:max-h-[352px] self-center rounded-lg"
                  />
                  <div className="flex justify-center mt-1 z-10">
                    <button
                      className="w-[44px] h-[44px] bg-screenDark bg-opacity-80 hover:bg-screenDark duration-300 border border-btn text-btn flex justify-center rounded-2xl text-[25px]"
                      onClick={handleViewTrailer}
                    >
                      <BsPlay className="self-center" />
                    </button>
                    <p className="self-center mx-2">View Trailer</p>
                  </div>
                </div>
              </div>
              <div className="flex flex-col w-full mr-8">
                <div className="flex flex-col mx-2 xl:mx-5 md:flex-row md:justify-between">
                  <div>
                    <div>
                      <p className="text-[25px] y9:text-[28px] font-bold text-center md:text-start">
                        {data.title}
                      </p>
                      <div className="flex justify-center md:justify-start text-textPlight">
                        <p>{data.release_date?.split("-")[0]}</p>
                        <RxDotFilled className="self-center" />
                        <p>Movie</p>
                        <RxDotFilled className="self-center" />
                        <p>{data.runtime} min</p>
                      </div>
                      <div className="flex md:hidden mt-3 justify-center gap-2">
                        <div className="border md:border-0 border-border px-1 rounded-lg w-[100px] h-[76px] self-center text-center backdrop-blur-sm bg-screenDark bg-opacity-80">
                          <div>
                            <p className="text-[29px] text-yellow-400 inline">
                              {data.vote_average?.toFixed(1)}
                            </p>
                            /10
                          </div>
                          <p className="text-sm text-textPDark">{data.vote_count} votes</p>
                        </div>
                        <div className="text-[28px] cursor-pointer text-green-700 md:border-0 border border-border w-[60px] h-[76px] rounded-lg text-center flex justify-center self-center backdrop-blur-sm bg-screenDark bg-opacity-50 hover:bg-screenDark">
                          {liked ? <AiFillLike className="self-center" /> : <BiLike className="self-center" />}
                        </div>
                        <div className="text-[28px] cursor-pointer text-red-700 border md:border-0 border border-border w-[60px] h-[76px] rounded-lg text-center flex justify-center self-center backdrop-blur-sm bg-screenDark bg-opacity-50 hover:bg-screenDark">
                          {liked ? <AiFillDislike className="self-center" /> : <BiDislike className="self-center" />}
                        </div>
                        <div
                          className="text-[28px] cursor-pointer border md:border-0 border-border w-[60px] h-[76px] rounded-lg text-center flex justify-center self-center backdrop-blur-sm bg-screenDark bg-opacity-50 hover:bg-screenDark"
                          onClick={() => setLiked(!liked)}
                        >
                          {liked ? <AiFillHeart className="self-center" /> : <AiOutlineHeart className="self-center" />}
                        </div>
                      </div>
                      <div className="flex justify-center md:justify-start mt-5">
                        {data.genres?.slice(0, 5).map((genre) => (
                          <Link
                            key={genre.id}
                            to={`/genres/${genre.id}`}
                            state={{ genre: genre.name }}
                          >
                            <p className="mr-2 backdrop-blur-sm bg-gray-200 dark:bg-opacity-10 bg-opacity-20 py-1 px-3 mt-2 rounded-sm hover:bg-screenDark hover:text-screenLight duration-300">
                              {genre.name}
                            </p>
                          </Link>
                        ))}
                      </div>
                      <p className="my-3 text-sm lg:text-[16px]">
                        Cast:
                        <p className="inline text-[16px] text-gray-600 md:text-textPlight">
                          {data.credits?.cast?.slice(0, 3).map(c => c.name).join(", ")}
                        </p>
                      </p>
                      <p className="my-3 text-sm lg:text-[16px]">
                        Country:
                        <p className="inline text-[16px] text-gray-600 md:text-textPlight">
                          {data.production_countries?.map(c => c.name).join(", ")}
                        </p>
                      </p>
                      <p className="my-3 text-sm lg:text-[16px]">
                        Language:
                        <p className="inline text-[16px] text-gray-600 md:text-textPlight">
                          {data.spoken_languages?.map(l => l.name).join(", ")}
                        </p>
                      </p>
                    </div>
                    <div className="mt-2">{data.overview}</div>
                  </div>
                  <div className="flex flex-col w-full justify-between mt-4">
                    <div className="hidden md:flex md:flex-col md:justify-between self-end">
                      <div>
                        <div className="flex gap-2 justify-center">
                          <div className="text-[28px] cursor-pointer text-green-700 md:border-0 border border-border w-[60px] h-[76px] rounded-lg text-center flex justify-center self-center backdrop-blur-sm bg-screenDark bg-opacity-50 hover:bg-screenDark">
                            {liked ? <AiFillLike className="self-center" /> : <BiLike className="self-center" />}
                          </div>
                          <div className="text-[28px] cursor-pointer text-red-700 border md:border-0 border border-border w-[60px] h-[76px] rounded-lg text-center flex justify-center self-center backdrop-blur-sm bg-screenDark bg-opacity-50 hover:bg-screenDark">
                            {liked ? <AiFillDislike className="self-center" /> : <BiDislike className="self-center" />}
                          </div>
                          <div
                            title="add to favorite"
                            className="text-[28px] cursor-pointer border md:border-0 border-border w-[60px] h-[76px] rounded-lg text-center flex justify-center self-center backdrop-blur-sm bg-screenDark bg-opacity-50 hover:bg-screenDark"
                            onClick={() => setLiked(!liked)}
                          >
                            {liked ? <AiFillHeart className="self-center" /> : <AiOutlineHeart className="self-center" />}
                          </div>
                        </div>
                        <div className="flex gap-2 mt-2 justify-end">
                          <div className="border md:border-0 border-border px-1 rounded-lg w-[100px] h-[76px] self-center text-center backdrop-blur-sm bg-screenDark bg-opacity-80 hover:bg-screenDark">
                            <div>
                              <p className="text-[29px] text-yellow-400 inline">
                                {data.vote_average?.toFixed(1)}
                              </p>
                              /10
                            </div>
                            <p className="text-sm text-textPDark">{data.vote_count} votes</p>
                          </div>
                        </div>
                      </div>
                      <div className="self-center mt-20">
                        <button className="text-btn text-[20px] font-semibold border md:border-0 border-border px-6 py-4 rounded-lg self-center text-center backdrop-blur-sm bg-screenDark bg-opacity-80 hover:bg-screenDark duration-300">
                          SHARE
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div ref={contentRef} className="mt-28">
              <div className="w-full">
                {/* Header: Tabbed Navigation */}
                <ul className="flex justify-around md:mx-6 xl:mx-20 2xl:mx-24 text-[17px] bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-900 backdrop-blur-md bg-opacity-80 dark:bg-opacity-80 rounded-xl p-4 shadow-lg">
                  {poi.map((item, index) => (
                    <li
                      key={index}
                      className={`px-4 py-2 cursor-pointer transition-all duration-300 ease-out ${
                        query === item
                          ? "bg-[length:100%_2px] font-semibold text-blue-600 dark:text-blue-400"
                          : "text-gray-600 dark:text-gray-300 hover:text-blue-500 dark:hover:text-blue-300"
                      } origin-right bg-left-bottom bg-gradient-to-r from-blue-600 to-blue-600 dark:from-blue-400 dark:to-blue-400 bg-[length:0%_2px] bg-no-repeat hover:bg-[length:100%_2px]`}
                      onClick={() => setQuery(item)}
                    >
                      {item}
                    </li>
                  ))}
                </ul>
                {/* Body: Content Area */}
                <div className="mx-8 mt-6 bg-white dark:bg-gray-800 bg-opacity-95 dark:bg-opacity-95 rounded-2xl p-6 shadow-xl border border-gray-200 dark:border-gray-700">
                  {query === "Details" && <Details movieId={movieId} />}
                  {query === "Comments" && <Comments movieId={movieId} />}
                  {query === "Trailer" && <Trailer movieId={movieId} />}
                </div>
              </div>
            </div>
          </div>
        </div>
        <div className="w-full relative z-0 group">
          <div className="w-full absolute gradient-10 h-[50px] z-20 rotate-180 top-0" />
          <div className="z-0 bg-screenDark overflow-hidden max-h-[680px]">
            <img
              src={`https://image.tmdb.org/t/p/w1280${data.backdrop_path}`}
              alt={data.title}
              className="opacity-30 relative min-w-[700px] md:w-full xl:min-h-[625px]"
            />
          </div>
          <div className="w-full relative gradient-10 dark:h-[150px] dark:-top-[150px] -top-[100px] h-[100px]" />
        </div>
      </div>
    </div>
  );
};

export default withRouter(MoviePage);
</file>

<file path=pages\moviePage\Trailer.jsx>
import React from 'react';
import { useGetMovieDetailsQuery } from '../../redux/services/tmdbApi';
import { LoadingOutlined } from '@ant-design/icons';

const Trailer = ({ movieId }) => {
  if (!movieId) {
    return (
      <div className="text-center text-red-500 mt-10">
        Invalid movie ID. Please select a valid movie.
      </div>
    );
  }

  const { data, isFetching, error } = useGetMovieDetailsQuery({ movieId });

  if (isFetching) {
    return (
      <div className="flex justify-center mt-10">
        <LoadingOutlined style={{ fontSize: 48 }} />
        <p className="text-[26px] self-center mx-1 text-screenLight dark:text-textDark">
          Loading...
        </p>
      </div>
    );
  }

  if (error || !data) {
    return (
      <div className="text-center text-red-500 mt-10">
        Error loading trailer. Please try again later.
      </div>
    );
  }

  // Find the first YouTube trailer
  const trailer = data.videos?.results?.find(
    (video) => video.site === 'YouTube' && video.type === 'Trailer'
  );

  if (!trailer) {
    return (
      <div className="text-center text-screenLight dark:text-textDark mt-10">
        No trailer available for this movie.
      </div>
    );
  }

  return (
    <div className="p-6 md:p-10 max-w-4xl mx-auto">
      <h2 className="text-xl font-semibold mb-4 text-screenLight dark:text-textDark">
        Official Trailer: {data.title || 'Not available'}
      </h2>
      <div className="relative w-full" style={{ paddingBottom: '56.25%' /* 16:9 aspect ratio */ }}>
        <iframe
          className="absolute top-0 left-0 w-full h-full rounded-lg"
          src={`https://www.youtube.com/embed/${trailer.key}`}
          title={trailer.name || 'Movie Trailer'}
          frameBorder="0"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
          allowFullScreen
        ></iframe>
      </div>
    </div>
  );
};

export default Trailer;
</file>

<file path=pages\moviesPage\MoviesPage.jsx>
import { LoadingOutlined } from "@ant-design/icons";
import ItemCard from "../../components/explore/ItemCard";
import { useGetTopMoviesQuery } from "../../redux/services/tmdbApi";

const MoviesPage = () => {
  const { data, isFetching, error } = useGetTopMoviesQuery();

  if (isFetching) {
    return (
      <div className="flex justify-center mt-10">
        <div>
          <LoadingOutlined style={{ fontSize: 48 }} />
        </div>
        <p className="text-[26px] self-center mx-1">Loading . . .</p>
      </div>
    );
  }

  if (error) return <div>Error loading movies.</div>;

  return (
    <div className="flex flex-col w-full self-center">
      <h7 className="text-[22px] font-semibold mx-8 mt-8">Popular Movies</h7>
      <div className="flex justify-center w-full">
        <div className="flex flex-wrap justify-center gap-2 y9:gap-5 mx-1 md:mx-8 mt-10 self-center">
          {data?.results?.slice(0, 8)?.map((movie) => (
            <ItemCard movieId={movie.id} key={movie.id} />
          ))}
        </div>
      </div>
    </div>
  );
};

export default MoviesPage;
</file>

<file path=pages\seriesPage\SeriesPage.jsx>
import { useGetTopSeriesQuery } from "../../redux/services/tmdbApi";
import ItemCard from "../../components/explore/ItemCard";
import { LoadingOutlined } from "@ant-design/icons";

const SeriesPage = () => {
  const { data, isFetching, error } = useGetTopSeriesQuery();

  if (isFetching) {
    return (
      <div className="flex justify-center mt-10">
        <div>
          <LoadingOutlined style={{ fontSize: 48 }} />
        </div>
        <p className="text-[26px] self-center mx-1">Loading . . .</p>
      </div>
    );
  }

  if (error) return <div>Error loading series.</div>;

  return (
    <div className="flex flex-col">
      <h7 className="text-[22px] font-semibold mx-8 mt-8">Popular Series</h7>
      <div className="flex justify-center">
        <div className="flex flex-wrap gap-5 mx-8 mt-10">
          {data?.results?.slice(0, 8)?.map((series) => (
            <ItemCard movieId={series.id} key={series.id} />
          ))}
        </div>
      </div>
    </div>
  );
};

export default SeriesPage;
</file>

<file path=redux\store.js>
import { configureStore } from '@reduxjs/toolkit';
import { tmdbApi } from './services/tmdbApi';
import { authApi } from './services/authApi';
import { commentsApi } from './services/commentsApi';
import authReducer from './slices/authSlice';

export const store = configureStore({
  reducer: {
    [tmdbApi.reducerPath]: tmdbApi.reducer,
    [authApi.reducerPath]: authApi.reducer,
    [commentsApi.reducerPath]: commentsApi.reducer,
    auth: authReducer,
  },
  middleware: (getDefaultMiddleware) =>
    getDefaultMiddleware().concat(tmdbApi.middleware, authApi.middleware, commentsApi.middleware),
});
</file>

<file path=redux\services\authApi.js>
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { BASE_API_URL } from '../../constants/api';

export const authApi = createApi({
  reducerPath: 'authApi',
  baseQuery: fetchBaseQuery({
    baseUrl: BASE_API_URL,
    prepareHeaders: (headers) => {
      const token = localStorage.getItem('authToken');
      if (token) {
        headers.set('Authorization', `Bearer ${token}`);
      }
      return headers;
    },
  }),
  endpoints: (builder) => ({
    signup: builder.mutation({
      query: ({ username, email, password }) => ({
        url: '/api/auth/signup',
        method: 'POST',
        body: { username, email, password },
      }),
    }),
    login: builder.mutation({
      query: ({ email, password }) => ({
        url: '/api/auth/login',
        method: 'POST',
        body: { email, password },
      }),
    }),
    getProfile: builder.query({
      query: () => '/api/auth/profile',
    }),
    updateUsername: builder.mutation({
      query: ({ username }) => ({
        url: '/api/auth/profile',
        method: 'PATCH',
        body: { username },
      }),
    }),
    uploadProfilePicture: builder.mutation({
      query: (formData) => ({
        url: '/api/auth/profile/picture',
        method: 'POST',
        body: formData,
      }),
    }),
  }),
});

export const {
  useSignupMutation,
  useLoginMutation,
  useGetProfileQuery,
  useUpdateUsernameMutation,
  useUploadProfilePictureMutation,
} = authApi;
</file>

<file path=redux\services\commentsApi.js>
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { BASE_API_URL } from '../../constants/api';

export const commentsApi = createApi({
  reducerPath: 'commentsApi',
  baseQuery: fetchBaseQuery({
    baseUrl: BASE_API_URL,
    prepareHeaders: (headers) => {
      const token = localStorage.getItem('authToken');
      if (token) {
        headers.set('Authorization', `Bearer ${token}`);
      }
      return headers;
    },
  }),
  endpoints: (builder) => ({
    getComments: builder.query({
      query: ({ contentId, contentType }) => `/api/comments/${contentId}/${contentType}`,
      transformResponse: (response) => response,
      providesTags: (result, error, { contentId, contentType }) => [
        { type: 'Comments', id: `${contentId}-${contentType}` },
      ],
    }),
    postComment: builder.mutation({
      query: ({ contentId, contentType, content }) => ({
        url: '/api/comments',
        method: 'POST',
        body: { contentId, contentType, content },
      }),
      invalidatesTags: (result, error, { contentId, contentType }) => [
        { type: 'Comments', id: `${contentId}-${contentType}` },
      ],
    }),
  }),
});

export const { useGetCommentsQuery, usePostCommentMutation } = commentsApi;
</file>

<file path=redux\services\tmdbApi.js>
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';
import { BASE_API_URL } from '../../constants/api';

export const tmdbApi = createApi({
  reducerPath: 'tmdbApi',
  baseQuery: fetchBaseQuery({
    baseUrl: BASE_API_URL,
    prepareHeaders: (headers) => {
      const token = localStorage.getItem('authToken');
      if (token) {
        headers.set('Authorization', `Bearer ${token}`);
      }
      return headers;
    },
  }),
  endpoints: (builder) => ({
    getTopMovies: builder.query({
      query: () => '/api/media/movies/popular',
      transformResponse: (response) => response,
      providesTags: ['TopMovies'],
    }),
    getTopSeries: builder.query({
      query: () => '/api/media/series/popular',
      transformResponse: (response) => response,
      providesTags: ['TopSeries'],
    }),
    getTopMoviesByGenre: builder.query({
      query: ({ genreId }) => `/api/media/movies/genre/${genreId}`,
      transformResponse: (response) => response,
      providesTags: (result, error, { genreId }) => [{ type: 'MoviesByGenre', id: genreId }],
    }),
    getMovieDetails: builder.query({
      query: ({ movieId }) => `/api/media/movies/${movieId}`,
      transformResponse: (response) => response,
      providesTags: (result, error, { movieId }) => [{ type: 'MovieDetails', id: movieId }],
    }),
    getSeriesDetails: builder.query({
      query: ({ seriesId }) => `/api/media/series/${seriesId}`,
      transformResponse: (response) => response,
      providesTags: (result, error, { seriesId }) => [{ type: 'SeriesDetails', id: seriesId }],
    }),
    getMovieImg: builder.query({
      query: ({ movieId }) => `/api/media/movies/${movieId}/images`,
      transformResponse: (response) => response,
      providesTags: (result, error, { movieId }) => [{ type: 'MovieImages', id: movieId }],
    }),
    getComingSoon: builder.query({
      query: () => '/api/media/movies/upcoming',
      transformResponse: (response) => response,
      providesTags: ['ComingSoon'],
    }),
    getFindMovie: builder.query({
      query: ({ search }) => `/api/media/search/multi?query=${encodeURIComponent(search)}`,
      transformResponse: (response) => response,
      providesTags: (result, error, { search }) => [{ type: 'Search', id: search }],
    }),
    getGenres: builder.query({
      query: () => '/api/media/genres',
      transformResponse: (response) => response,
      providesTags: ['Genres'],
    }),
    getTrendingMovies: builder.query({
      query: () => '/api/media/trending/movies',
      transformResponse: (response) => response,
      providesTags: ['TrendingMovies'],
    }),
  }),
});

export const {
  useGetTopMoviesQuery,
  useGetTopSeriesQuery,
  useGetTopMoviesByGenreQuery,
  useGetMovieDetailsQuery,
  useGetSeriesDetailsQuery,
  useGetMovieImgQuery,
  useGetComingSoonQuery,
  useGetFindMovieQuery,
  useGetGenresQuery,
  useGetTrendingMoviesQuery,
} = tmdbApi;
</file>

<file path=redux\slices\authSlice.js>
import { createSlice } from '@reduxjs/toolkit';

const initialState = {
  token: localStorage.getItem('authToken') || null,
  user: null,
  isAuthenticated: !!localStorage.getItem('authToken'),
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    setCredentials: (state, action) => {
      state.token = action.payload.token;
      state.user = action.payload.user;
      state.isAuthenticated = true;
      localStorage.setItem('authToken', action.payload.token);
    },
    updateUser: (state, action) => {
      state.user = { ...state.user, ...action.payload };
    },
    logout: (state) => {
      state.token = null;
      state.user = null;
      state.isAuthenticated = false;
      localStorage.removeItem('authToken');
    },
  },
});

export const { setCredentials, updateUser, logout } = authSlice.actions;
export default authSlice.reducer;
</file>

<file path=styles\globalStyles.css>
@tailwind base;
@tailwind components;
@tailwind utilities;

@font-face{
  font-family:"helvetica";
  src:url("https://candyfonts.com/wp-data/2018/10/26/11538/HELR45W.ttf") format("woff"),
  url("https://candyfonts.com/wp-data/2018/10/26/11538/HELR45W.ttf") format("opentype"),
  url("https://candyfonts.com/wp-data/2018/10/26/11538/HELR45W.ttf") format("truetype");
}

@media (pointer: coarse) {
  .sidebar-hover-fix:hover {
    background-color: transparent !important;
  }
}

* {
  margin: 0;
  padding: 0; 
  box-sizing: border-box;
  scroll-behavior: smooth;
  font-family: "Eudoxus Sans";
}


.IranNastaliq {
  font-family: 'IranNastaliq';
}

.fa {
  font-family: 'Vazirmatn';
}

.en {
  font-family: "Eudoxus Sans", sans-serif;

}

.gradient-02 {
  position: absolute;
  width: 200px;
  height: 438px;
  top: 0px;
  right: 0px;

  background: #7aebfb;
  filter: blur(190px);
}

.glassmorphism {
  background: rgba(255, 255, 255, 0.25);
  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.37);
  backdrop-filter: blur(4px);
  -webkit-backdrop-filter: blur(4px);
  border: 1px solid rgba(255, 255, 255, 0.18);
}

.gradient-03 {
  /* position: absolute; */
  width: 404px;
  height: 800px;
  left: 20%;
  top: 5%;

  background: rgba(149, 66, 232, 0.35);
  filter: blur(175px);
  transform: rotate(-114.2deg);
}

.gradient-04 {
  position: absolute;
  width: 304px;
  height: 100vh;
  left: 30%;
  top: 10%;

  background: rgba(45, 72, 152, 0.75);
  filter: blur(200px);
  transform: rotate(-53.13deg);
}

.gradient-05 {
  background: linear-gradient(180deg,
      rgba(255, 255, 255, 0.04) 0%,
      rgba(255, 255, 255, 0) 100%);
}
.lightTheme{
  background-color: #f9f9f9;
}

.gradient-06 

{

  /* ff 3.6+ */
  background:-moz-linear-gradient(90deg, rgba(6, 6, 9, 1) 0%, rgba(30, 31, 45, 1) 71%, rgba(35, 28, 44, 1) 100%); 

  /* safari 5.1+,chrome 10+ */
  background:-webkit-linear-gradient(90deg, rgba(6, 6, 9, 1) 0%, rgba(30, 31, 45, 1) 71%, rgba(35, 28, 44, 1) 100%);

  /* opera 11.10+ */
  background:-o-linear-gradient(90deg, rgba(6, 6, 9, 1) 0%, rgba(30, 31, 45, 1) 71%, rgba(35, 28, 44, 1) 100%);

  /* ie 6-9 */
  filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#231C2C', endColorstr='#060609', GradientType=0 );

  /* ie 10+ */
  background:-ms-linear-gradient(90deg, rgba(6, 6, 9, 1) 0%, rgba(30, 31, 45, 1) 71%, rgba(35, 28, 44, 1) 100%);

  /* global 94%+ browsers support */
  background:linear-gradient(90deg, rgba(6, 6, 9, 1) 0%, rgba(30, 31, 45, 1) 71%, rgba(35, 28, 44, 1) 100%);

}

.btn {

  /* ff 3.6+ */
  background: -moz-linear-gradient(161deg, rgba(38, 147, 250, 1) 0%, rgba(24, 94, 235, 1) 100%);

  /* safari 5.1+,chrome 10+ */
  background: -webkit-linear-gradient(161deg, rgba(38, 147, 250, 1) 0%, rgba(24, 94, 235, 1) 100%);

  /* opera 11.10+ */
  background: -o-linear-gradient(161deg, rgba(38, 147, 250, 1) 0%, rgba(24, 94, 235, 1) 100%);

  /* ie 6-9 */
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#185EEB', endColorstr='#2693FA', GradientType=1);

  /* ie 10+ */
  background: -ms-linear-gradient(161deg, rgba(38, 147, 250, 1) 0%, rgba(24, 94, 235, 1) 100%);

  /* global 94%+ browsers support */
  background: linear-gradient(161deg, rgba(38, 147, 250, 1) 0%, rgba(24, 94, 235, 1) 100%);

}

.gradient-07 {

  /* ff 3.6+ */
  background: -moz-linear-gradient(90deg, rgba(43, 42, 62, 1) 0%, rgba(38, 36, 58, 1) 100%);

  /* safari 5.1+,chrome 10+ */
  background: -webkit-linear-gradient(90deg, rgba(43, 42, 62, 1) 0%, rgba(38, 36, 58, 1) 100%);

  /* opera 11.10+ */
  background: -o-linear-gradient(90deg, rgba(43, 42, 62, 1) 0%, rgba(38, 36, 58, 1) 100%);

  /* ie 6-9 */
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#26243A', endColorstr='#2B2A3E', GradientType=0);

  /* ie 10+ */
  background: -ms-linear-gradient(90deg, rgba(43, 42, 62, 1) 0%, rgba(38, 36, 58, 1) 100%);

  /* global 94%+ browsers support */
  background: linear-gradient(90deg, rgba(43, 42, 62, 1) 0%, rgba(38, 36, 58, 1) 100%);

}

.gradient-08 {

  /* ff 3.6+ */
  background: -moz-linear-gradient(0deg, rgba(32, 29, 43, 1) 5%, rgba(238, 130, 130, 0.01) 100%);

  /* safari 5.1+,chrome 10+ */
  background: -webkit-linear-gradient(0deg, rgba(32, 29, 43, 1) 5%, rgba(238, 130, 130, 0.01) 100%);

  /* opera 11.10+ */
  background: -o-linear-gradient(0deg, rgba(32, 29, 43, 1) 5%, rgba(238, 130, 130, 0.01) 100%);

  /* ie 6-9 */
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#201D2B', endColorstr='#EE8282', GradientType=1);

  /* ie 10+ */
  background: -ms-linear-gradient(0deg, rgba(32, 29, 43, 1) 5%, rgba(238, 130, 130, 0.01) 100%);

  /* global 94%+ browsers support */
  background: linear-gradient(0deg, rgba(32, 29, 43, 1) 5%, rgba(238, 130, 130, 0.01) 100%);

}
</file>

<file path=styles\styles.js>
export const styles = {
  sideBarItem:
    "flex pl-7 text-[17px] md:text-[19px]  py-4 dark:hover:bg-[#29263b] hover:bg-zinc-300 rounded-r-xl mr-1 cursor-pointer  duration-75 hover:border-l-[3px] border-btn ",
    sideBar:"min-w-[290px] top-0 left-0  flex flex-col text-[17px] ",
    loginBtn:"px-9 text-textDark py-2 self-center btn rounded-xl hover:bg-[#ca2b20] hover:rounded-md duration-200 font-bold text-sm",
    loginBtn2:"px-12 self-start text-textDark py-2 btn rounded-xl hover:bg-[#ca2b20] hover:rounded-md duration-200 font-bold text-sm",
    searchIcn:"text-[24px] text-textPDark bg-white self-center  border-opacity-70  bg-transparent border border-textPDark border-2 border-l-0 rounded-r-2xl h-[45px] md:h-[50px] w-[50px] p-3 ",
    searchInput:"w-[150px]  sm:w-[185px] md:w-[200px] lg:w-[400px] h-[45px] md:h-[50px]  bg-transparent border border-textPDark border-opacity-70 border-2 border-r-0 px-3 rounded-l-2xl placeholder:text-textPDark outline-none",
    navbarItem:'font-semibold px-2 mr-5 self-center cursor-pointer hover:text-btn duration-75',
    heartBtn:"flex justify-center w-[46px] h-[46px] border-2 dark:border-textDark self-center  rounded-[50%] text-blue-600 text-[25px] hover:text-[27px] hover:text-blue-700 duration-200 ",
    listenBtn:"w-[131px] h-[56px] bg-blue-700 rounded-[30px] mx-3 font-bold hover:bg-blue-900 duration-200 text-textDark",
    
};

</file>

